import pgp from 'pg-promise';

import db from '@agung_dhewe/webapps/src/db.js'
import Api from '@agung_dhewe/webapps/src/api.js'
import sqlUtil from '@agung_dhewe/pgsqlc'
import context from '@agung_dhewe/webapps/src/context.js'  
import logger from '@agung_dhewe/webapps/src/logger.js'<% if (usesequencer) { %>
import { createSequencerDocument } from '@agung_dhewe/webapps/src/sequencerdoc.js' <% } %>


import * as Extender from './extenders/<%= moduleName %>.apiext.js'

const moduleName = '<%= moduleName %>'
const headerSectionName = 'header'
const headerTableName = '<%= headerTableName %>'

// api: account
export default class extends Api {
	constructor(req, res, next) {
		super(req, res, next);
		Api.cekLogin(req)
	}


	// dipanggil dengan model snake syntax
	// contoh: header-list
	//         header-open-data
	async init(body) { return await <%= moduleName %>_init(this, body) }

	// header
	async headerList(body) { return await <%= moduleName %>_headerList(this, body) }
	async headerOpen(body) { return await <%= moduleName %>_headerOpen(this, body) }
	async headerUpdate(body) { return await <%= moduleName %>_headerUpdate(this, body)}
	async headerCreate(body) { return await <%= moduleName %>_headerCreate(this, body)}
	async headerDelete(body) { return await <%= moduleName %>_headerDelete(this, body) }

}

// init module
async function <%= moduleName %>_init(self, body) {
	const req = self.req

	// set sid untuk session ini, diperlukan ini agar session aktif
	req.session.sid = req.sessionID

	try {
		// ambil data app dari database
		const sql = 'select apps_id, apps_url from core."apps"'
		const result = await db.any(sql)

		const appsUrls = {}
		for (let row of result) {
			appsUrls[row.apps_id] = {
				url: row.apps_url
			}
		}

		return {
			userId: req.session.user.userId,
			userName: req.session.user.userName,
			userFullname: req.session.userFullname,
			sid: req.session.sid ,
			notifierId: Api.generateNotifierId(moduleName, req.sessionID),
			notifierSocket: req.app.locals.appConfig.notifierSocket,
			appsUrls: appsUrls
		}
		
	} catch (err) {
		throw err
	}
}


// data logging
async function <%= moduleName %>_log(self, body, startTime, tablename, id, action, remark='') {
	const { source } = body
	const req = self.req
	const user_id = req.session.user.userId
	const user_name = req.session.user.userFullname
	const ipaddress = req.ip
	const metadata = JSON.stringify({source:source})
	const endTime = process.hrtime.bigint();
	const executionTimeMs = Number((endTime - startTime) / 1_000_000n); // hasil dalam ms tanpa desimal
	const logdata = {id, user_id, user_name, moduleName, action, tablename, executionTimeMs, remark, metadata, ipaddress}
	await logger.log(logdata)
}




async function <%= moduleName %>_headerList(self, body) {
	const tablename = headerTableName
	const { criteria={}, limit=0, offset=0, columns=[], sort={} } = body
	const searchMap = {<% headerSearchMap.forEach(searchmap => { %>
		<%= searchmap.name %>: `<%- searchmap.data %>`,<% }) %>
	};

	try {
	
		// jika tidak ada default searchtext
		if (searchMap.searchtext===undefined) {
			throw new Error(`'searchtext' belum didefinisikan di searchMap`)	
		}
		

		// hilangkan criteria '' atau null
		for (var cname in criteria) {
			if (criteria[cname]==='' || criteria[cname]===null) {
				delete criteria[cname]
			}
		}


		var max_rows = limit==0 ? 10 : limit
		const {whereClause, queryParams} = sqlUtil.createWhereClause(criteria, searchMap) 
		const sql = sqlUtil.createSqlSelect({tablename, columns, whereClause, sort, limit:max_rows+1, offset, queryParams})
		const rows = await db.any(sql, queryParams);

		
		var i = 0
		const data = []
		for (var row of rows) {
			i++
			if (i>max_rows) { break }

			<% headerFieldsLookup.forEach(lookup => { %>// lookup: <%= lookup.bindingDisplay %> dari field <%= lookup.bindingText %> pada table <%= lookup.table %> dimana (<%= lookup.table %>.<%= lookup.bindingValue %> = <%= headerTableName %>.<%=lookup.fieldname%>)
			{
				const { <%= lookup.bindingText %> } = await sqlUtil.lookupdb(db, '<%= lookup.table %>', '<%=lookup.bindingValue%>', row.<%=lookup.fieldname%>)
				row.<%= lookup.bindingDisplay %> = <%= lookup.bindingText %>
			}
			<% }) %>


			// pasang extender di sini
			if (typeof Extender.headerListRow === 'function') {
				await Extender.headerListRow(row)
			}

			data.push(row)
		}

		var nextoffset = null
		if (rows.length>max_rows) {
			nextoffset = offset+max_rows
		}

		return {
			criteria: criteria,
			limit:  max_rows,
			nextoffset: nextoffset,
			data: data
		}

	} catch (err) {
		throw err
	}
}

async function <%= moduleName %>_headerOpen(self, body) {
	const tablename = headerTableName

	try {
		const { id } = body 
		const criteria = { <%= headerPrimaryKey %>: id }
		const searchMap = { <%= headerPrimaryKey %>: `<%= headerPrimaryKey %> = \${<%= headerPrimaryKey %>}`}
		const {whereClause, queryParams} = sqlUtil.createWhereClause(criteria, searchMap) 
		const sql = sqlUtil.createSqlSelect({
			tablename: tablename, 
			columns:[], 
			whereClause, 
			sort:{}, 
			limit:0, 
			offset:0, 
			queryParams
		})
		const data = await db.one(sql, queryParams);
		if (data==null) { 
			throw new Error(`[${tablename}] data dengan id '${id}' tidak ditemukan`) 
		}	

		<% headerFieldsLookup.forEach(lookup => { %>// lookup: <%= lookup.bindingDisplay %> dari field <%= lookup.bindingText %> pada table <%= lookup.table %> dimana (<%= lookup.table %>.<%= lookup.bindingValue %> = <%= headerTableName %>.<%=lookup.fieldname%>)
		{
			const { <%= lookup.bindingText %> } = await sqlUtil.lookupdb(db, '<%= lookup.table %>', '<%=lookup.bindingValue%>', data.<%=lookup.fieldname%>)
			data.<%= lookup.bindingDisplay %> = <%= lookup.bindingText %>
		}
		<% }) %>


		// lookup data createby
		{
			const { user_fullname } = await sqlUtil.lookupdb(db, 'core.user', 'user_id', data._createby)
			data._createby = user_fullname ?? ''
		}

		// lookup data modifyby
		{
			const { user_fullname } = await sqlUtil.lookupdb(db, 'core.user', 'user_id', data._modifyby)
			data._modifyby = user_fullname ?? ''
		}
		

		// pasang extender untuk olah data
		if (typeof Extender.headerOpen === 'function') {
			await Extender.headerOpen(data)
		}

		return data
	} catch (err) {
		throw err
	}
}


async function <%= moduleName %>_headerCreate(self, body) {
	const { source, data } = body
	const req = self.req
	const tablename = headerTableName
	const user_id = req.session.user.userId
	const startTime = process.hrtime.bigint();

	try {


		const result = await db.tx(async dt=>{

			sqlUtil.connect(dt)

			data._createby = user_id
			data._createdate = (new Date()).toISOString()

			<% if (usesequencer) { %>
			// buat sequencer	
			const sequencer = createSequencerDocument(dt, { 
				COMPANY_CODE: req.app.locals.appConfig.COMPANY_CODE,
				blockLength: <%= identifierBlock %>,
				numberLength: <%= identifierLength %>,
			})

			if (typeof Extender.sequencerSetup === 'function') {
				// jika ada keperluan menambahkan code block/cluster di sequencer
				// dapat diimplementasikan di exterder sequencerSetup 
				await Extender.sequencerSetup(sequencer, data)
			}

			<%if (yearly) { 
			%>// generate data <%= identifierPrefix %> reset pertahun
			const seqdata = await sequencer.yearly('<%= identifierPrefix %>')<% } 
			else { 
			
			%>// generate data <%= identifierPrefix %> reset perbulan
			const seqdata = await sequencer.monthly('<%= identifierPrefix %>')<% } %>	
			data.<%= headerPrimaryKey %> = seqdata.id
			<% } %>	

			// apabila ada keperluan pengelohan data sebelum disimpan, lakukan di extender headerCreating
			if (typeof Extender.headerCreating === 'function') {
				await Extender.headerCreating(data, seqdata)
			}


			<% if (autoid) { 
			%><% if (usesequencer) { %>const cmd = sqlUtil.createInsertCommand(tablename, data)<% } else { %>const cmd = sqlUtil.createInsertCommand(tablename, data, ['<%= headerPrimaryKey %>'])<% } %><% 
		    } else { %>const cmd = sqlUtil.createInsertCommand(tablename, data)<% } %>
			const res = await cmd.execute(data)


			// apabila ada keperluan pengelohan data setelah disimpan, lakukan di extender headerCreated
			if (typeof Extender.headerCreated === 'function') {
				await Extender.headerCreated(result, data)
			}

		
			return res
		})

		// record log
		<%= moduleName %>_log(self, body, startTime, tablename, result.<%= headerPrimaryKey %>, 'CREATE')
		
		return result
	} catch (err) {
		throw err
	}
}

async function <%= moduleName %>_headerUpdate(self, body) {
	const { source, data } = body
	const tablename = headerTableName
	const req = self.req
	const user_id = req.session.user.userId
	const startTime = process.hrtime.bigint();

	try {
		sqlUtil.connect(db)

		data._modifyby = user_id
		data._modifydate = (new Date()).toISOString()
		
		const cmd =  sqlUtil.createUpdateCommand(tablename, data, ['<%= headerPrimaryKey %>'])
		const result = await cmd.execute(data)
		
		// record log
		<%= moduleName %>_log(self, body, startTime, tablename, data.<%= headerPrimaryKey %>, 'UPDATE')

		return result
	} catch (err) {
		throw err
	}
}


async function <%= moduleName %>_headerDelete(self, body) {
	const tablename = headerTableName
	const req = self.req
	const user_id = req.session.user.userId
	const startTime = process.hrtime.bigint();

	try {
		const { source, id } = body 
		const dataToRemove = {<%= headerPrimaryKey %>: id}

		const cmd = sqlUtil.createDeleteCommand(tablename, ['<%= headerPrimaryKey %>'])
		const result = await cmd.execute(dataToRemove)
	
		// record log
		<%= moduleName %>_log(self, body, startTime, tablename, id, 'DELETE')

		return result
	} catch (err) {
		throw err
	}
}